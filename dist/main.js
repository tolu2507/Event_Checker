/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ (() => {

eval("const first = document.getElementById(\"first\");\r\nconst second = document.getElementById(\"second\");\r\nconst button = document.getElementById(\"button\");\r\nconst screen = document.querySelector(\"#screen\");\r\n\r\nfunction createArray(A, B) {\r\n  if (A.length === 0 && B.length === 0) {\r\n    throw Error(`\r\n          ============================================================================\r\n          ||           array cannot be empty provide some data, sample data=        ||\r\n          ||           array1 =[1,2,3,4,5,6,0,7,8,9]                                ||\r\n          ||           array2 =[1,2,3,4,5,6,0,7,8,9]                                ||\r\n          ============================================================================\r\n          `);\r\n  }\r\n  if (A.length !== B.length) {\r\n    const diff =\r\n      A.length > B.length ? A.length - B.length : B.length - A.length;\r\n    const errorResponse =\r\n      A.length > B.length\r\n        ? `Add ${diff} extra values to the array2`\r\n        : `Add ${diff} extra values to the array1`;\r\n    throw Error(`\r\n          ===================================================================================================\r\n          ||                                                                                                ||\r\n          ||           First Array length = ${A.length}                                                     ||\r\n          ||           Second Array length = ${B.length}                                                    ||\r\n          ||                                                                                                ||\r\n          ||           array cannot be of different lenght, ensure there                                    ||\r\n          ||           data are equal. THIS IS HOW TO FIX YOUR CODE                                         ||\r\n          ||                                                                                                ||\r\n          ||           ${errorResponse}                                                                     ||\r\n          ====================================================================================================\r\n          `);\r\n  }\r\n  const NewArray = [];\r\n  for (let [index, value] of A.entries()) {\r\n    const object = {\r\n      start: value,\r\n      stop: B[index],\r\n    };\r\n\r\n    if (object !== null || object !== undefined) {\r\n      NewArray.push(object);\r\n    } else {\r\n      throw Error(\"Invalid\");\r\n    }\r\n  }\r\n  return NewArray;\r\n}\r\nfunction filterArray(params, second, first) {\r\n  const result = [];\r\n  if (!params) {\r\n    throw Error(\"please provide a valid array.\");\r\n  }\r\n  if (!second) {\r\n    throw Error(\r\n      \"please provide a valid array . N.B= this second array is used to keep account of how many times the loops would run \"\r\n    );\r\n  }\r\n  if (Array.isArray(second) && Array.isArray(second)) {\r\n    for (const [index, value] of second.entries()) {\r\n      if (value) {\r\n        const obj = {\r\n          start: first[index],\r\n          stop: value,\r\n        };\r\n        const filtered = params.filter((item) => item.start >= value);\r\n        const comp = [obj, ...filtered];\r\n        result.push(comp);\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error(\"please ensure both arguments are arrays\");\r\n  }\r\n  return result;\r\n}\r\nfunction sortArray(param) {\r\n  return param.map((item) => {\r\n    if (item) {\r\n      return item.sort((a, b) => a.start - b.start);\r\n    }\r\n  });\r\n}\r\nfunction uniqueCollection(param) {\r\n  const unique = [];\r\n  param.map((item) => {\r\n    let set = [];\r\n    let pet = [];\r\n    if (item) {\r\n      set.length = 0;\r\n      pet.length = 0;\r\n      for (let i = 0; i < item.length; i++) {\r\n        if (!set.includes(item[i].start)) {\r\n          set.push(item[i].start);\r\n          pet.push(item[i].stop);\r\n        }\r\n      }\r\n      let see = createArray(set, pet);\r\n      unique.push(see);\r\n    }\r\n  });\r\n  return unique;\r\n}\r\nfunction result(params) {\r\n  return params.map((item) => {\r\n    if (Array.isArray(item)) {\r\n      let hit = item[0].stop;\r\n      return item.filter((items) => {\r\n        if (items.stop >= hit) {\r\n          hit = items.stop;\r\n          return items;\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\nfunction Final(res, arr1, arr2) {\r\n  let counter = 0;\r\n  for (const arr of res) {\r\n    if (counter < arr.length) {\r\n      counter = arr.length;\r\n    }\r\n  }\r\n  return `You can attend a maximum of ${counter} ${\r\n    counter === 1 ? \"event\" : \"events\"\r\n  } at this time from the following sources of data [${arr1}] and [${arr2}]`;\r\n}\r\nfunction convertToArrayofNumber(str) {\r\n  if (/^[0-9,]+$/.test(str)) {\r\n    console.log(\"The string contains only numbers and commas.\");\r\n    return str.split(\",\").map((item) => +item);\r\n  } else {\r\n    console.log(\"The string does not contain only numbers and commas.\");\r\n    alert(\"values have to be numbers and cant be negative for both arrays\");\r\n    console.log(\r\n      \"values have to be numbers and cant be negative for both arrays\"\r\n    );\r\n    throw new Error(\r\n      \"values have to be numbers and cant be negative for both arrays\"\r\n    );\r\n  }\r\n}\r\nfunction getMaximumEvents(array1 = [], array2 = []) {\r\n  const First = array1;\r\n  const Second = array2;\r\n\r\n  const NewItem = createArray(First, Second);\r\n  const sortitem = filterArray(NewItem, Second, First);\r\n  const uniqueArray = sortArray(sortitem);\r\n  const onlyNum = uniqueCollection(uniqueArray);\r\n  const res = result(onlyNum);\r\n  return Final(res, First, Second);\r\n}\r\nfunction checkIfSecondArrayIsGreaterThanFirstArray(array1 = [], array2 = []) {\r\n  const len = array1.length === array2.length ? array1.length : false;\r\n  let count = 0;\r\n  if (len) {\r\n    for (let [index, value] of array1.entries()) {\r\n      if (array2[index] > value) {\r\n        console.log(`${value} is lower than ${array2[index]}`);\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n  return count === len ? true : false;\r\n}\r\n\r\nbutton.addEventListener(\"click\", () => {\r\n  const First = first.value;\r\n  const Second = second.value;\r\n  screen.innerHTML = \"\"\r\n  if (!First || !Second) {\r\n    alert(\"Please enter a value of numbers sepersted with commas\");\r\n  } else if (typeof First === \"string\" && typeof Second === \"string\") {\r\n    if (First.length !== Second.length) {\r\n      alert(\"Please enter the same number of values\");\r\n    } else if (First.length === Second.length) {\r\n      const newFirst = convertToArrayofNumber(First);\r\n      const newSecond = convertToArrayofNumber(Second);\r\n\r\n      if (newFirst && Array.isArray(newFirst)) {\r\n        if (newSecond && Array.isArray(newSecond)) {\r\n          if (checkIfSecondArrayIsGreaterThanFirstArray(newFirst, newSecond)) {\r\n            console.log(getMaximumEvents(newFirst, newSecond));\r\n            screen.innerHTML = `<div class=\"text-[26px] uppercase font-extrabold text-emerald-900 h-full w-full md:h-full md:w-[600px] md:rounded-[50px] flex items-center justify-center bg-[#9ab9b9] rounded-full px-2\" id=\"screen-reader\">\r\n            ${getMaximumEvents(newFirst, newSecond)}\r\n            </div>`;\r\n          } else {\r\n            console.log(\r\n              \"please ensure the second array values are greater than your first array values for a more accurate figure.\"\r\n            );\r\n            screen.innerHTML = `<div class=\"text-[26px] capitalize font-extrabold text-red-700 h-full w-full md:h-full md:w-[600px] md:rounded-[50px] flex items-center justify-center bg-[#789898] rounded-full px-2\" id=\"screen-reader\">\r\n            please ensure the second array values are greater than your first array values for a more accurate figure.\r\n            </div>`;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Invalid\");\r\n    }\r\n  }\r\n});\r\n\r\n// const First = [2, 4, 1, 5];\r\n// const Second = [4, 6, 9, 7];\r\n\r\n// const response = getMaximumEvents(First, Second);\r\n// console.log(response);\r\n\r\n// const num = \"1,2,3,4,y,6,7,8,9\";\r\n// console.log(\r\n//   num.split(\",\").filter((item) => {\r\n//     if (typeof +item !== \"number\") {\r\n//       throw new Error(\"invalid number\");\r\n//     } else {\r\n//       return +item\r\n//     }\r\n//   })\r\n// );\r\n\n\n//# sourceURL=webpack://hacker/./src/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.js"]();
/******/ 	
/******/ })()
;